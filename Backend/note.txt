const express = require('express');
const mysql = require('mysql');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();
app.use(express.json());
app.use(cors());

// MySQL connection
const db = mysql.createConnection({
 host: 'localhost',
 user: 'root',
 password: '',
 database: 'best_shop_'
});

db.connect((err) => {
 if (err) throw err;
 console.log('Connected to MySQL');
});

// Middleware to check if the user is an admin
const isAdmin = (req, res, next) => {
    // Assuming the user's role is sent in the request body
    const userRole = req.body.role;
    if (!userRole) return res.status(403).send({ message: "No role provided!" });

    // Check if the user is an admin
    if (userRole !== 'admin') {
        return res.status(403).send({ message: "Access denied. You are not an admin." });
    }

    // If everything is good, proceed to the next middleware or route handler
    next();
};


// Login route
app.post('/users', (req, res) => {
    const { username, password } = req.body;
    console.log("ula....")
    const query = 'SELECT * FROM users WHERE username = ?';
    db.query(query, [username], (err, results) => {
        if (err) {
            console.error('Error logging in:', err);
            res.status(500).send('Error logging in');
        } else if (results.length === 0) {
            res.status(401).send('Invalid username or password');
        } else {
            const user = results[0];
            bcrypt.compare(password, user.password, (err, isMatch) => {
                if (err) throw err;
                if (isMatch) {
                    // Directly send the user's role in the response
                    res.status(200).send({ auth: true, role: user.role });
                } else {
                    res.status(401).send('Invalid username or password');
                }
            });
        }
    });
});

app.get('/users', (req, res) => {
    console.log('Fetching users...');
    const query = 'SELECT * FROM users';
    db.query(query, (err, results) => {
        if (err) {
            console.error('Error fetching users:', err);
            res.status(500).send('Error fetching users');
        } else {
            console.log('fetched users');
            res.send(results);
        }
    });
});

// Example of a protected route
app.get('/admin-only-route', isAdmin, (req, res) => {
    res.send('Welcome to the admin-only route!');
});


//category
app.get('/categories', (req, res) => {
    console.log('Fetching categories...');
    const query = 'SELECT * FROM categories';
    db.query(query, (err, results) => {
        if (err) {
            console.error('Error fetching categories:', err);
            res.status(500).send('Error fetching categories');
        } else {
            console.log('Categories fetched successfully');
            res.send(results);
        }
    });
});

app.post('/categories', (req, res) => {
    const { name } = req.body;
    const query = 'INSERT INTO categories (category) VALUES (?)';
    db.query(query, [name], (err, result) => {
       if (err) throw err;
       res.send(result);
    });
});

// Edit category
app.put('/categories/:id', (req, res) => {
    const { id } = req.params;
    const { category } = req.body;
    const query = 'UPDATE categories SET category = ? WHERE id = ?';
    db.query(query, [category, id], (err, result) => {
       if (err) {
         console.error('Error updating category:', err);
         res.status(500).send('Error updating category');
       } else {
         res.send(result);
       }
    });
   });
   
   // Delete category
   app.delete('/categories/:id', (req, res) => {
    const { id } = req.params;
    const query = 'DELETE FROM categories WHERE id = ?';
    db.query(query, [id], (err, result) => {
       if (err) {
         console.error('Error deleting category:', err);
         res.status(500).send('Error deleting category');
       } else {
         res.send(result);
       }
    });
   });

//Brands
app.get('/brands', (req, res) => {
    console.log('Fetching brands...');
    const query = 'SELECT * FROM brands';
    db.query(query, (err, results) => {
        if (err) {
            console.error('Error fetching brands:', err);
            res.status(500).send('Error fetching brands');
        } else {
            console.log('brands fetched successfully');
            res.send(results);
        }
    });
});

app.post('/brands', (req, res) => {
    const { name } = req.body;
    const query = 'INSERT INTO brands (brand_name) VALUES (?)';
    db.query(query, [name], (err, result) => {
       if (err) throw err;
       res.send(result);
    });
});

// Edit brands
app.put('/brands/:brand_id', (req, res) => {
const { id } = req.params;
const { brand } = req.body;
const query = 'UPDATE brands SET brand_name = ? WHERE brand_id = ?';
db.query(query, [brand, id], (err, result) => {
    if (err) {
        console.error('Error updating brands:', err);
        res.status(500).send('Error updating brands');
    } else {
        res.send(result);
    }
});
});

// Delete brands
app.delete('/brands/:brand_id', (req, res) => {
const { id } = req.params;
const query = 'DELETE FROM brands WHERE brand_id = ?';
db.query(query, [id], (err, result) => {
    if (err) {
        console.error('Error deleting brands:', err);
        res.status(500).send('Error deleting brands');
    } else {
        res.send(result);
    }
});
});


//gender
app.get('/genders', (req, res) => {
    console.log('Fetching genders...');
    const query = 'SELECT * FROM genders';
    db.query(query, (err, results) => {
        if (err) {
            console.error('Error fetching genders:', err);
            res.status(500).send('Error fetching genders');
        } else {
            console.log('genders fetched successfully');
            res.send(results);
        }
    });
});

app.post('/genders', (req, res) => {
    const { name } = req.body;
    const query = 'INSERT INTO genders (gender) VALUES (?)';
    db.query(query, [name], (err, result) => {
       if (err) throw err;
       res.send(result);
    });
});

// Edit gender
app.put('/genders/:g_id', (req, res) => {
const { g_id } = req.params;
const { gender } = req.body;
const query = 'UPDATE genders SET gender = ? WHERE g_id = ?';
db.query(query, [gender, g_id], (err, result) => {
    if (err) {
        console.error('Error updating genders:', err);
        res.status(500).send('Error updating genders');
    } else {
        res.send(result);
    }
});
});

// Delete gender
app.delete('/genders/:g_id', (req, res) => {
const { g_id } = req.params;
const query = 'DELETE FROM genders WHERE g_id = ?';
db.query(query, [g_id], (err, result) => {
    if (err) {
        console.error('Error deleting genders:', err);
        res.status(500).send('Error deleting genders');
    } else {
        res.send(result);
    }
});
});
   

//Sub Categories
app.get('/subcategories', (req, res) => {
    console.log('Fetching subcategories...');
    const query = `SELECT * FROM subcategories `;
    db.query(query, (err, results) => {
        if (err) {
            console.error('Error fetching subcategories:', err);
            res.status(500).send('Error fetching subcategories');
        } else {
            console.log('Subcategories fetched successfully');
            res.send(results);
        }
    });
});



app.post('/subcategories', (req, res) => {
    const { name, categoryId, genderId } = req.body;
    const query = 'INSERT INTO subcategories (name, categoryId, genderId) VALUES (?, ?, ?)';
    db.query(query, [name, categoryId, genderId], (err, result) => {
        if (err) {
            console.error('Error adding subcategory:', err);
            res.status(500).send('Error adding subcategory');
        } else {
            console.log('Subcategory added successfully');
            res.send(result);
        }
    });
});

// Edit subCategory
app.put('/subcategories/:id', (req, res) => {
const { id } = req.params;
const { name, categoryId, genderId } = req.body;
const query = 'UPDATE subcategories SET name = ?, categoryId = ?, genderId = ? WHERE id = ?';
db.query(query, [name, categoryId, genderId, id], (err, result) => {
    if (err) {
        console.error('Error updating SubCategory:', err);
        res.status(500).send('Error updating SubCategory');
    } else {
        res.send(result);
    }
});
});
    

// Delete subCategory
app.delete('/subcategories/:id', (req, res) => {
const { id } = req.params;
const query = 'DELETE FROM subcategories WHERE id = ?';
db.query(query, [id], (err, result) => {
    if (err) {
        console.error('Error deleting SubCategory:', err);
        res.status(500).send('Error deleting SubCategory');
    } else {
        res.send(result);
    }
});
});

// Fetch brands by subcategory
app.get('/brands/:subCategoryName', (req, res) => {
    const { subCategoryName } = req.params;
    const query = `
        SELECT DISTINCT brands.brand_name
        FROM brands
        JOIN product ON brands.brand_name = product.brandName
        WHERE product.subCategoryName = ?
    `;
    db.query(query, [subCategoryName], (err, results) => {
        if (err) {
            console.error('Error fetching brands by subcategory:', err);
            res.status(500).send('Error fetching brands by subcategory');
        } else {
            res.send(results);
        }
    });
});


//product
app.get('/product', (req, res) => {
console.log('Fetching products...');
const { subCategoryName } = req.query; 
const { brandName } = req.query;
let params = [];

let query = 'SELECT * FROM product';
if (subCategoryName) {
    query += ' WHERE subCategoryName = ?';
    console.log(req.query);
    console.log('Subcategory Fetched...');
    params = [subCategoryName];
} 
if(brandName){
    query += ' WHERE brandName = ?';
    console.log(req.query);
    console.log('Brandname Fetched...');
    params = [brandName];
    
}

db.query(query, params, (err, results) => {
    if (err) {
        console.error('Error fetching products:', err);
        res.status(500).send('Error fetching products');
    } else {
        console.log('Products fetched successfully');
        console.log(results);
        res.send(results); 
    }
});
});


app.post('/product', (req, res) => {
    const { productName, description, categoryName, subCategoryName, genderName, brandName } = req.body;

    const query = 'INSERT INTO product (productName, description, categoryName, subCategoryName, genderName, brandName) VALUES (?, ?, ?, ?, ?, ?)';

    db.query(query, [productName, description, categoryName, subCategoryName, genderName, brandName], (err, result) => {
        if (err) {
            console.error(err);
            res.status(500).send({ error: 'An error occurred while inserting the product.' });
        } else {
            res.send(result);
        }
    });
});

// Edit product
app.put('/product/:product_id', (req, res) => {
const { product_id } = req.params;
const { productName, description, categoryName, subCategoryName, genderName, brandName } = req.body;
const query = 'UPDATE product SET productName = ?, description = ?, categoryName = ?, subCategoryName = ?, genderName = ?, brandName = ? WHERE product_id = ?';
db.query(query, [productName, description, categoryName, subCategoryName, genderName, brandName, product_id], (err, result) => {
    if (err) {
        console.error('Error updating product:', err);
        res.status(500).send('Error updating product');
    } else {
        res.send(result);
    }
});
});
   

// Delete product
app.delete('/product/:product_id', (req, res) => {
const { product_id } = req.params;
const query = 'DELETE FROM product WHERE product_id = ?';
db.query(query, [product_id], (err, result) => {
    if (err) {
        console.error('Error deleting products:', err);
        res.status(500).send('Error deleting products');
    } else {
        res.send(result);
    }
});
});


// app.get('/products', (req, res) => {
//     const query = 'SELECT * FROM products';
//     db.query(query, (err, results) => {
//        if (err) throw err;
//        res.send(results);
//     });
//    });

// app.post('/products', (req, res) => {
//     const { name, price, category, subCategory, brand } = req.body;
//     const query = 'INSERT INTO products (name, price, category, subCategory, brand) VALUES (?, ?, ?, ?, ?)';
//     db.query(query, [name, price, category, subCategory, brand], (err, result) => {
//        if (err) throw err;
//        res.send(result);
//     });
//    });
   

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));